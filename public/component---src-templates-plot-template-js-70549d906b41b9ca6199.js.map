{"version":3,"file":"component---src-templates-plot-template-js-70549d906b41b9ca6199.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/SearchBar.js","webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/templates/plotTemplate.js"],"sourcesContent":["import React, { useState } from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\n\nconst SearchBar = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allItemsJson {\n        nodes {\n          id\n          entityID\n          name\n        }\n      }\n    }\n  `)\n\n  const items = data.allItemsJson.nodes\n  const [query, setQuery] = useState(\"\")\n  const [filteredItems, setFilteredItems] = useState([])\n\n  const handleInputChange = event => {\n    const value = event.target.value\n    setQuery(value)\n\n    const suggestions = items.filter(item =>\n      item.name.toLowerCase().includes(value.toLowerCase())\n    )\n\n    setFilteredItems(suggestions)\n  }\n\n  return (\n    <div className=\"search-bar\">\n      <input\n        type=\"text\"\n        placeholder=\"Search items...\"\n        value={query}\n        onChange={handleInputChange}\n      />\n      {query && (\n        <ul className=\"suggestions\">\n          {filteredItems.map(item => (\n            <li key={item.id}>\n              <Link to={`/item/${item.entityID.replace('minecraft:', '')}`}>\n                {item.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  )\n}\n\nexport default SearchBar\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport SearchBar from \"./SearchBar\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    className=\"header\"\n  >\n    <Link\n      to=\"/\"\n      style={{\n        fontSize: `var(--font-sm)`,\n        textDecoration: `none`,\n      }}\n    >\n      {siteTitle}\n    </Link>\n      <SearchBar />\n  </header>\n)\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport Seo from \"./seo\"\n\nconst Layout = ({ children, className }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div\n        className={className}\n      >\n        <main>{children}</main>\n        <footer\n          style={{\n            marginTop: `var(--space-5)`,\n            fontSize: `var(--font-sm)`,\n            textAlign: 'center'\n          }}\n        >\n          <p>\n            Â© {new Date().getFullYear()} &middot; Built with\n            ðŸ’œ by JackJackSlaps\n          </p>\n          <small>All Images, Names, and whatever else belong to whoever owns them.</small>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport \"../styles/main.scss\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst PlotTemplate = ({ data, pageContext }) => {\n    const { plot } = pageContext\n\n    const centerX = (plot.start_coords.x + plot.end_coords.x) / 2\n    const centerZ = (plot.start_coords.z + plot.end_coords.z) / 2\n\n    const mapURL = `http://homesteadcraft.mcserver.us:8123/#homesteadcraft:${centerX}:76:${centerZ}:48:0:0:1:1:flat`\n    const plotName = plot.shopName ? plot.shopName : `Plot #${plot.plotNumber}`\n    return (\n        <Layout className=\"plot\">\n          <Seo title={plotName} />\n            <div class=\"grid grid--2 grid--mobile-1\">\n                <div className=\"map\"><iframe src={mapURL} /></div>\n                <div className=\"plot-info\">\n                    <a href=\"/\">Â« Back To Shopping District</a>\n                    <div className=\"plot-title\">\n                        <h1>{plotName}</h1>\n                        <div class=\"inline\">\n                          {plot.shopName && <p>Plot {plot.plotNumber}</p>}\n                          <p><a target=\"_blank\" href={mapURL}>{centerX} / / {centerZ}</a></p>\n                          <p>Owner: {plot.owner}</p>\n                        </div>\n                    </div>\n                    <h2>Items for Sale:</h2>\n                    <div className=\"items-grid\">\n                        <div className=\"th\">You Give</div><div className=\"th\">You Get</div>\n                        {plot.itemsForSale && plot.itemsForSale.map((item, index) => {\n                            console.log({ item });\n                            const itemEntity = item.item?.entityID?.replace('minecraft:', '')\n                            return (\n                                <div className=\"trade\">\n                                    {item.for ? <div className=\"item item--for\">{item.forQty} x <img className=\"item-icon\" src={`/icons/${item.for.entityID.replace('minecraft:', '')}.png`} /> {item.for.name}</div> : <div className=\"item item--for\">?</div>}\n                                    <div className=\"item item--get\">{item.qty || '?'} x <Link href={itemEntity ? `/item/${itemEntity}` : null}><img className=\"item-icon\" src={`/icons/${itemEntity}.png`} /> {item.item?.name || item.item}</Link>  {item.note && <div className=\"item-note\">{item.note}</div>}\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n  query ($plotNumber: Int!) {\n  plotsJson(plotNumber: {eq: $plotNumber}) {\n    plotNumber\n    shopName\n    owner\n    start_coords {\n      x\n      z\n    }\n    end_coords {\n      x\n      z\n    }\n    itemsForSale {\n      item\n      for\n      qty\n      forQty\n      note\n    }\n  }\n}\n`\n\nexport default PlotTemplate\n"],"names":["items","useStaticQuery","allItemsJson","nodes","query","setQuery","useState","filteredItems","setFilteredItems","className","type","placeholder","value","onChange","event","target","suggestions","filter","item","name","toLowerCase","includes","map","key","id","Link","to","entityID","replace","siteTitle","style","fontSize","textDecoration","children","data","site","siteMetadata","title","marginTop","textAlign","Date","getFullYear","description","metaDescription","defaultTitle","content","property","author","pageContext","plot","centerX","start_coords","x","end_coords","centerZ","z","mapURL","plotName","shopName","plotNumber","class","src","href","owner","itemsForSale","index","console","log","itemEntity","for","forQty","qty","note"],"sourceRoot":""}