{"version":3,"file":"component---src-pages-using-typescript-tsx-a9f963bb199ac5233724.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/using-typescript.tsx","webpack://gatsby-starter-default/./src/components/SearchBar.js","webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import React, { useState } from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\n\nconst SearchBar = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allItemsJson {\n        nodes {\n          id\n          entityID\n          name\n        }\n      }\n    }\n  `)\n\n  const items = data.allItemsJson.nodes\n  const [query, setQuery] = useState(\"\")\n  const [filteredItems, setFilteredItems] = useState([])\n\n  const handleInputChange = event => {\n    const value = event.target.value\n    setQuery(value)\n\n    const suggestions = items.filter(item =>\n      item.name.toLowerCase().includes(value.toLowerCase())\n    )\n\n    setFilteredItems(suggestions)\n  }\n\n  return (\n    <div className=\"search-bar\">\n      <input\n        type=\"text\"\n        placeholder=\"Search items...\"\n        value={query}\n        onChange={handleInputChange}\n      />\n      {query && (\n        <ul className=\"suggestions\">\n          {filteredItems.map(item => (\n            <li key={item.id}>\n              <Link to={`/item/${item.entityID.replace('minecraft:', '')}`}>\n                {item.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  )\n}\n\nexport default SearchBar\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport SearchBar from \"./SearchBar\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    className=\"header\"\n  >\n    <Link\n      to=\"/\"\n      style={{\n        fontSize: `var(--font-sm)`,\n        textDecoration: `none`,\n      }}\n    >\n      {siteTitle}\n    </Link>\n      <SearchBar />\n  </header>\n)\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport Seo from \"./seo\"\n\nconst Layout = ({ children, className }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div\n        className={className}\n      >\n        <main>{children}</main>\n        <footer\n          style={{\n            marginTop: `var(--space-5)`,\n            fontSize: `var(--font-sm)`,\n            textAlign: 'center'\n          }}\n        >\n          <p>\n            Â© {new Date().getFullYear()} &middot; Built with\n            ðŸ’œ by JackJackSlaps\n          </p>\n          <small>All Images, Names, and whatever else belong to whoever owns them.</small>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","location","Layout","pathname","site","buildTime","href","Link","to","items","useStaticQuery","allItemsJson","nodes","query","setQuery","useState","filteredItems","setFilteredItems","className","type","placeholder","value","onChange","event","target","suggestions","filter","item","name","toLowerCase","includes","map","key","id","entityID","replace","siteTitle","style","fontSize","textDecoration","children","siteMetadata","marginTop","textAlign","Date","getFullYear","description","metaDescription","defaultTitle","content","property","author"],"sourceRoot":""}